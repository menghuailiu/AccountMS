package patrickstar.com.accountms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import patrickstar.com.accountms.model.tb_pwd;
import patrickstar.com.accountms.db.DaoSession;
// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_PWD".
*/
public class tb_pwdDao extends AbstractDao<tb_pwd, Void> {

    public static final String TABLENAME = "TB_PWD";

    /**
     * Properties of entity tb_pwd.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
    };


    public tb_pwdDao(DaoConfig config) {
        super(config);
    }
    
    public tb_pwdDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_PWD\" (" + "\"ADDRESS\" TEXT,");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_PWD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, tb_pwd entity) {
        stmt.clearBindings();
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public tb_pwd readEntity(Cursor cursor, int offset) {
        tb_pwd entity = new tb_pwd() ;// password);
        entity.setPassword(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, tb_pwd entity, int offset) {
        entity.setPassword(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(tb_pwd entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(tb_pwd entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
