package patrickstar.com.accountms.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import patrickstar.com.accountms.db.DaoSession;
import patrickstar.com.accountms.model.tb_outaccount;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_OUTACCOUNT".
*/
public class tb_outaccountDao extends AbstractDao<tb_outaccount, Integer> {

    public static final String TABLENAME = "TB_OUTACCOUNT";

    /**
     * Properties of entity tb_outaccount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Integer.class, "_id", true, "_ID");
        public final static Property Money = new Property(1, Double.class, "money", false, "MONEY");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Mark = new Property(5, String.class, "mark", false, "MARK");
    };


    public tb_outaccountDao(DaoConfig config) {
        super(config);
    }
    
    public tb_outaccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_OUTACCOUNT\" (" + //
                "\"_ID\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"MONEY\" REAL," + // 1: money
                "\"TIME\" TEXT," + // 2: time
                "\"TYPE\" TEXT," + // 3: type
                "\"ADDRESS\" TEXT," + // 4: address
                "\"MARK\" TEXT);"); // 5: mark
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_OUTACCOUNT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, tb_outaccount entity) {
        stmt.clearBindings();
 
        Integer _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Double money = entity.getMoney();
        if (money != null) {
            stmt.bindDouble(2, money);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(6, mark);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public tb_outaccount readEntity(Cursor cursor, int offset) {
        tb_outaccount entity = new tb_outaccount( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // money
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // mark
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, tb_outaccount entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setMoney(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(tb_outaccount entity, long rowId) {
        return entity.get_id();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(tb_outaccount entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
